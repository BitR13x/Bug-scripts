#!/bin/bash

# Vulnerability scanning module

source "$(dirname "${BASH_SOURCE[0]}")/utils.sh"

# Setup OOB server for SSRF testing
setup_oob_server() {
    local scan_dir=$1
    
    log "INFO" "Setting up OOB server for SSRF testing..."
    
    if command -v interactsh-client &> /dev/null; then
        interactsh-client -v &> "$scan_dir/listen_server.txt" & 
        SERVER_PID=$!
        sleep 10  # Allow server to start
        
        LISTEN_SERVER=$(tail -n 1 "$scan_dir/listen_server.txt" | cut -f2 -d ' ')
        
        if [[ -n "$LISTEN_SERVER" ]]; then
            log "INFO" "OOB server started: $LISTEN_SERVER (PID: $SERVER_PID)"
            echo "$LISTEN_SERVER" > "$scan_dir/oob_server.txt"
            return 0
        else
            log "WARN" "Failed to start OOB server"
            return 1
        fi
    else
        log "WARN" "interactsh-client not available"
        return 1
    fi
}

# Nuclei vulnerability scanner
nuclei_scan() {
    local domain=$1
    local scan_dir=$2
    local input_file="$scan_dir/subdomain_live.txt"
    local output_file="$scan_dir/nuclei.txt"
    
    log "INFO" "Starting Nuclei vulnerability scan..."
    start_timer
    
    if [[ ! -f "$input_file" ]]; then
        log "WARN" "No live hosts found for Nuclei scan"
        return 1
    fi
    
    local listen_server=""
    if [[ -f "$scan_dir/oob_server.txt" ]]; then
        listen_server=$(cat "$scan_dir/oob_server.txt")
    fi
    
    if command -v nuclei &> /dev/null; then
        local nuclei_cmd="nuclei -silent -rl $REQUEST_PER_SEC -o $output_file -l $input_file"
        
        # Add interactsh server if available
        if [[ -n "$listen_server" ]]; then
            nuclei_cmd="$nuclei_cmd -iserver https://$listen_server"
        fi
        
        # Add template exclusions
        nuclei_cmd="$nuclei_cmd -exclude-templates $HOME/nuclei-templates/misconfiguration/http-missing-security-headers.yaml"
        nuclei_cmd="$nuclei_cmd -exclude-templates $HOME/nuclei-templates/miscellaneous/old-copyright.yaml"
        
        # Add template inclusions
        local template_dirs=(
            "$HOME/nuclei-templates/vulnerabilities/"
            "$HOME/nuclei-templates/cves/"
            "$HOME/nuclei-templates/misconfiguration/"
            "$HOME/nuclei-templates/takeovers/"
            "$HOME/nuclei-templates/default-logins/"
            "$HOME/nuclei-templates/exposures/"
            "$HOME/nuclei-templates/exposed-panels/"
        )
        
        for template_dir in "${template_dirs[@]}"; do
            if [[ -d "$template_dir" ]]; then
                nuclei_cmd="$nuclei_cmd -t $template_dir"
            fi
        done
        
        # Execute nuclei scan with timeout
        timeout 1800 bash -c "$nuclei_cmd" 2>/dev/null || log "WARN" "Nuclei scan failed or timed out"
        
        if [[ -f "$output_file" ]]; then
            local count=$(wc -l < "$output_file")
            log "INFO" "Nuclei found $count potential vulnerabilities"
            
            # Send notification for critical findings
            if [[ $count -gt 0 ]]; then
                notify_user "Nuclei scan completed: $count vulnerabilities found for $domain" "WARN"
            fi
        fi
    else
        log "WARN" "Nuclei not available"
        return 1
    fi
    
    end_timer "Nuclei vulnerability scan"
}

# SSRF vulnerability scanner
ssrf_scan() {
    local domain=$1
    local scan_dir=$2
    local input_file="$scan_dir/gau_output.txt"
    local output_file="$scan_dir/ssrf_results.txt"
    
    log "INFO" "Starting SSRF vulnerability scan..."
    start_timer
    
    if [[ ! -f "$input_file" ]]; then
        log "WARN" "No URLs found for SSRF testing"
        return 1
    fi
    
    local listen_server=""
    if [[ -f "$scan_dir/oob_server.txt" ]]; then
        listen_server=$(cat "$scan_dir/oob_server.txt")
    else
        log "WARN" "No OOB server available for SSRF testing"
        return 1
    fi
    
    if command -v gf &> /dev/null; then
        cat "$input_file" | \
            gf ssrf | \
            head -500 | \
            qsreplace "https://$listen_server" | \
            httpx -silent -threads 20 -timeout 10 > "$output_file" 2>/dev/null || log "WARN" "SSRF scan failed"
        
        if [[ -f "$output_file" ]]; then
            local count=$(wc -l < "$output_file")
            log "INFO" "Tested $count URLs for SSRF"
        fi
    else
        log "WARN" "GF patterns not available for SSRF testing"
    fi
    
    end_timer "SSRF vulnerability scan"
}

# XSS vulnerability scanner
xss_scan() {
    local domain=$1
    local scan_dir=$2
    local input_file="$scan_dir/gau_output.txt"
    local output_file="$scan_dir/xss_results.txt"
    local raw_output="$scan_dir/xss_raw_results.txt"
    
    log "INFO" "Starting XSS vulnerability scan..."
    start_timer
    
    if [[ ! -f "$input_file" ]]; then
        log "WARN" "No URLs found for XSS testing"
        return 1
    fi
    
    if command -v gf &> /dev/null && command -v dalfox &> /dev/null; then
        cat "$input_file" | \
            gf xss | \
            head -200 | \
            qsreplace -a | \
            httpx -silent -threads 20 -mc 200 -timeout 10 | \
            dalfox pipe -S --skip-bav --skip-grepping --timeout 10 > "$raw_output" 2>/dev/null || log "WARN" "XSS scan failed"
        
        if [[ -f "$raw_output" ]]; then
            # Extract vulnerable URLs
            grep -E "(POC|VULN)" "$raw_output" | cut -d ' ' -f2 | sort -u > "$output_file" 2>/dev/null || true
            
            local count=$(wc -l < "$output_file" 2>/dev/null || echo "0")
            log "INFO" "Found $count potential XSS vulnerabilities"
            
            if [[ $count -gt 0 ]]; then
                notify_user "XSS vulnerabilities found for $domain: $count" "WARN"
            fi
        fi
    else
        log "WARN" "Required tools (gf/dalfox) not available for XSS testing"
    fi
    
    end_timer "XSS vulnerability scan"
}

# CORS vulnerability scanner
cors_scan() {
    local domain=$1
    local scan_dir=$2
    local input_file="$scan_dir/gau_output.txt"
    local output_file="$scan_dir/cors_results.txt"
    
    log "INFO" "Starting CORS vulnerability scan..."
    start_timer
    
    if [[ ! -f "$input_file" ]]; then
        log "WARN" "No URLs found for CORS testing"
        return 1
    fi
    
    if command -v CorsMe &> /dev/null; then
        cat "$input_file" | \
            head -100 | \
            qsreplace -a | \
            httpx -silent -threads 20 -mc 200 -timeout 10 | \
            CorsMe -t 20 -output "$output_file" 2>/dev/null || log "WARN" "CORS scan failed"
        
        if [[ -f "$output_file" ]]; then
            local count=$(wc -l < "$output_file")
            log "INFO" "Tested $count URLs for CORS misconfigurations"
        fi
    else
        log "WARN" "CorsMe not available for CORS testing"
    fi
    
    end_timer "CORS vulnerability scan"
}

# Prototype pollution scanner
prototype_pollution_scan() {
    local domain=$1
    local scan_dir=$2
    local input_file="$scan_dir/gau_output.txt"
    local output_file="$scan_dir/prototype_pollution_results.txt"
    
    log "INFO" "Starting prototype pollution scan..."
    start_timer
    
    if [[ ! -f "$input_file" ]]; then
        log "WARN" "No URLs found for prototype pollution testing"
        return 1
    fi
    
    if command -v ppmap &> /dev/null; then
        cat "$input_file" | \
            head -100 | \
            qsreplace -a | \
            httpx -silent -threads 20 -mc 200 -timeout 10 | \
            ppmap > "$output_file" 2>/dev/null || log "WARN" "Prototype pollution scan failed"
        
        if [[ -f "$output_file" ]]; then
            local count=$(wc -l < "$output_file")
            log "INFO" "Tested $count URLs for prototype pollution"
        fi
    else
        log "WARN" "ppmap not available for prototype pollution testing"
    fi
    
    end_timer "Prototype pollution scan"
}

# SQL injection scanner (basic)
sqli_scan() {
    local domain=$1
    local scan_dir=$2
    local input_file="$scan_dir/gau_output.txt"
    local output_file="$scan_dir/sqli_results.txt"
    
    log "INFO" "Starting basic SQL injection scan..."
    start_timer
    
    if [[ ! -f "$input_file" ]]; then
        log "WARN" "No URLs found for SQLi testing"
        return 1
    fi
    
    if command -v gf &> /dev/null; then
        cat "$input_file" | \
            gf sqli | \
            head -100 | \
            qsreplace "'" | \
            httpx -silent -threads 10 -mc 500 -timeout 15 > "$output_file" 2>/dev/null || log "WARN" "SQLi scan failed"
        
        if [[ -f "$output_file" ]]; then
            local count=$(wc -l < "$output_file")
            log "INFO" "Found $count potential SQL injection points"
            
            if [[ $count -gt 0 ]]; then
                notify_user "Potential SQL injection vulnerabilities found for $domain: $count" "WARN"
            fi
        fi
    else
        log "WARN" "GF patterns not available for SQLi testing"
    fi
    
    end_timer "SQL injection scan"
}

# Port scanning
port_scan() {
    local domain=$1
    local scan_dir=$2
    local output_file="$scan_dir/port_scan.txt"
    
    log "INFO" "Starting port scan..."
    start_timer
    
    if command -v naabu &> /dev/null; then
        naabu -host "$domain" \
            -silent \
            -ec \
            -rate "$REQUEST_PER_SEC" \
            -timeout 5000 \
            -retries 2 > "$output_file" 2>/dev/null || log "WARN" "Port scan failed"
        
        if [[ -f "$output_file" ]]; then
            local count=$(wc -l < "$output_file")
            log "INFO" "Found $count open ports"
        fi
    else
        log "WARN" "Naabu not available for port scanning"
    fi
    
    end_timer "Port scan"
}

# Kill OOB server
cleanup_oob_server() {
    if [[ -n "$SERVER_PID" ]]; then
        log "INFO" "Cleaning up OOB server (PID: $SERVER_PID)"
        kill -9 "$SERVER_PID" &> /dev/null || true
        unset SERVER_PID
    fi
}

# Main vulnerability scanning function
run_vulnerability_scan() {
    local domain=$1
    local scan_dir=$2
    local scan_types=$3  # Comma-separated list: nuclei,ssrf,xss,cors,prototype
    
    log "INFO" "Starting vulnerability scanning for $domain"
    
    # Setup OOB server for SSRF testing
    setup_oob_server "$scan_dir"
    
    # Parse scan types
    IFS=',' read -ra SCAN_ARRAY <<< "$scan_types"
    
    for scan_type in "${SCAN_ARRAY[@]}"; do
        case "$scan_type" in
            "nuclei")
                nuclei_scan "$domain" "$scan_dir"
                ;;
            "ssrf")
                ssrf_scan "$domain" "$scan_dir"
                ;;
            "xss")
                xss_scan "$domain" "$scan_dir"
                ;;
            "cors")
                cors_scan "$domain" "$scan_dir"
                ;;
            "prototype")
                prototype_pollution_scan "$domain" "$scan_dir"
                ;;
            "sqli")
                sqli_scan "$domain" "$scan_dir"
                ;;
            "port")
                port_scan "$domain" "$scan_dir"
                ;;
            *)
                log "WARN" "Unknown scan type: $scan_type"
                ;;
        esac
    done
    
    # Cleanup OOB server
    cleanup_oob_server
    
    log "INFO" "Vulnerability scanning completed for $domain"
    return 0
}
